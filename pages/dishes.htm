title = "Dishes"
url = "/dishes"
layout = "default"
==
<?php
function onStart()
{
    $this['currentPage'] = 'dish';
    $this['dishes'] = Plugins\Responsiv\DishSmith\Models\Dish::ofUser(Auth::getUser())->get();
}

function onSaveDish()
{
    $user = Auth::getUser();

    if (post('dish_id')) {
        $dish = Plugins\Responsiv\DishSmith\Models\Dish::ofUser($user)->find(post('dish_id'));
        $dish->ingredients()->detach();
        $dish->save(['name' => post('name')]);
    }
    else {
        $dish = Plugins\Responsiv\DishSmith\Models\Dish::create([
                'name' => post('name'),
                'user_id' => $user->id
            ]);
    }

    if (!$dish)
        throw new Exception('Unable to find dish!');

    $ingredients = $this->getIngredients();

    foreach ($ingredients as $ingredientData) {
        $ingredient = Plugins\Responsiv\DishSmith\Models\Ingredient::firstOrCreate(['name' => $ingredientData['name']]);
        $dish->ingredients()->attach($ingredient->id, [
            'type' => trim($ingredientData['type']),
            'amount' => trim($ingredientData['amount'])
        ]);
    }

    $this['dishes'] = Plugins\Responsiv\DishSmith\Models\Dish::ofUser(Auth::getUser())->get();
}

function onAddIngredient()
{
    $ingredients = $this->getIngredients();

    if (trim(post('ingredient')) != '') {
        $ingredients[] = [
            'name' => post('ingredient'),
            'type' => post('type', 'units'),
            'amount' => post('amount', 1),
        ];
    }

    $this['ingredients'] = $ingredients;
    $this['dish'] = ['name' => post('name')];
}

function getIngredients()
{
    $ingredients = [];
    $ingredientsRaw = post('ingredients');
    if (isset($ingredientsRaw['name'])) {
        foreach ($ingredientsRaw['name'] as $key => $value) {
            $ingredients[] = [
                'name' => $value,
                'type' => $ingredientsRaw['type'][$key],
                'amount' => $ingredientsRaw['amount'][$key]
            ];
        }
    }

    return $ingredients;
}

function onDeleteDish()
{
    if (!post('dish_id'))
        return;

    $user = Auth::getUser();
    $dish = Plugins\Responsiv\DishSmith\Models\Dish::ofUser($user)->find(post('dish_id'));
    if ($dish) {
        $dish->ingredients()->detach();
        $dish->delete();
    }

    $this['dishes'] = Plugins\Responsiv\DishSmith\Models\Dish::ofUser($user)->get();
}

function onModifyDish()
{
    if (!post('dish_id'))
        return;

    $dish = Plugins\Responsiv\DishSmith\Models\Dish::ofUser(Auth::getUser())->find(post('dish_id'));
    if ($dish) {
        $this['dish'] = $dish;
        $this['ingredients'] = $dish->getIngredients();
        $this['ingredientCount'] = $dish->ingredients()->count();
    }
    else
        $this->onNewDish();
}

function onNewDish()
{
    $this['ingredientCount'] = 0;
}

function onSortDishes()
{
    if ($sortData = post('sortOrder')) {
        $ids = array_keys($sortData);
        $orders = array_values($sortData);

        $dish = new Plugins\Responsiv\DishSmith\Models\Dish;
        $dish->setSortableOrder($ids, $orders);
    }

    $this->onStart();
}
?>
==
{% put scripts %}
<script>
    $(document).on('keyup', '#inputDishName', function(){
        var name = $(this).val()
        if (!name) 
            $('#previewDishName').html('<span class="text-muted">No name</span>')
        else
            $('#previewDishName').text(name)
    })

    function clearIngredientsForm() {
        $('#inputIngredientAmount, #inputIngredientName').val('')
        $('#inputIngredientAmount').focus()
        $('#previewIngredientNumber').text($('#partialDishesIngredients li').length)
    }

    function removeIngredientItem(el) {
        $(el).closest('li').remove()
        $('#previewIngredientNumber').text($('#partialDishesIngredients li').length)
    }

    function toggleEditMode() {
        $('#dishesPage').toggleClass('edit-mode');
        if ($('#dishesPage').hasClass('edit-mode'))
            $('#inputDishName').focus();
    }

    $(document).render(function(){

        var placeholderEl = $('<div class="col-xs-12 col-sm-12 col-md-6 col-lg-4 dish-placeholder" />')
        
        $('#partialDishesDishes').sortable({
            containerSelector: 'div.dishes',
            itemSelector: '.dish-item',
            placeholder: placeholderEl,
            onDrop: function ($item, container, _super) {
                _super($item, container)

                /*
                 * Build an object of ID:ORDER
                 */
                var orderData = {}

                $('#partialDishesDishes .dish-item').each(function(index){
                    var id = $(this).data('dish-id')
                    orderData[id] = index + 1
                })

                $('#partialDishesDishes').request('onSortDishes', {
                    data: { sortOrder: orderData },
                    update: { 'dishes/dishes': '#partialDishesDishes' }
                })
            },
            distance: 10
        })
    })
</script>
{% endput %}
<div class="dishes-page" id="dishesPage">

    <div id="partialDishesDishes" class="dishes">
        {% partial 'dishes/dishes' %}
    </div>

    <!-- Form -->
    <div class="row dish-form" id="partialDishesForm">
        {% partial 'dishes/form' %}
    </div>

</div>
